Sets
   t  hourly periods                     /t1*t24/
   i  generation characteristic segments /i1*i2/
   j  units                              /j1*j2/
;

Scalars

  Va  water availability (Mm3)         /3.024/
;

$ontext
Here the user should add the necessary commands for importing the following parameters:
EP(t)            day-ahead prices at each hourly period t (euro per MWh)
SUC(j)           start-up cost of unit j (euro)
Pmin(j)          power generated by unit j when discharging the unit's minimum stable discharge (MW)
Qpmax(i,j)       maximum length of the i-th segment of the j-th unit's production function (cubic meters per second)
a(i,j)           slope of the i-th segment of the j-th unit's production function (MW per cubic meters per second)
$offtext

Parameters

      Qmin(j)    minimum water flow unit j (m3 per s)
        /j1         25
         j2         25/

      Qmax(j)    maximum water flow unit j (m3 per s)
        /j1         60
         j2         60/
;

Variables
   z         income for selling energy in the day-ahead energy market;

Positive Variable
   P(t,j)    generated power in hour t
   Qp(t,i,j) discharged water through the turbine in the segment i
   Q(t,j)    discharged water through the turbine (sum of segments)
   O(t,j)    change of the unit j state

Binary Variable
   u(t,j)    on and off state of the unit j
   v(t,i,j)  equal 1 if water discharged has exceeded block i in period t unit j

Equations

   of             always define objective function
   e_P(t,j)       power generation in hour t
   e_Q(t,j)       water discharge of plant in period t
   e_Qp1(t,i,j)   discharged water flow in segment 1
   e_Qp2(t,i,j)   discharged water flow in segment 1
   e_Qp3(t,i,j)   discharged water flow in segment 2 to 5
   e_Qp4(t,i,j)   discharged water flow in segment 2 to 5
   e_O(t,j)       change of the unit j state
   e_Va           water availability;


   of..                          z =e= sum((t,j), EP(t) * P(t,j) - SUC(j) * O(t,j));
   e_P(t,j)..                    P(t,j) =e= u(t,j) * Pmin(j) + sum(i, a(i,j) * Qp(t,i,j));
   e_Q(t,j)..                    Q(t,j) =e= u(t,j) * Qmin(j) + sum(i, Qp(t,i,j));
   e_Qp1(t,'i1',j)..             Qp(t,'i1',j) =l= u(t,j) * Qpmax('i1',j);
   e_Qp2(t,'i1',j)..             Qp(t,'i1',j) =g= v(t,'i1',j) * Qpmax('i1',j);
   e_Qp3(t,i,j)$(ord(i) gt 1)..  Qp(t,i,j) =l= v(t,i-1,j) * Qpmax(i,j);
   e_Qp4(t,i,j)$(ord(i) gt 1)..  Qp(t,i,j) =g= v(t,i,j) * Qpmax(i,j);
   e_O(t,j)..                    O(t,j) =g= u(t,j) - u(t-1,j);
   e_Va..                        sum((t,j), Q(t,j) * 3600/1000000) =l= Va;


Model    HPP /all/;

Solve    HPP using mip maximizing z;

