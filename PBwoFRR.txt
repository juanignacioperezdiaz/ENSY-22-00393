Sets
   t  hourly periods                     /t1*t24/
   i  generation characteristic segments /i1*i5/
;

Scalars
* Parameters of water flow
  Qmax  maximum water flow (m3 per s)                              /120/
  Qmin  minimum water flow (m3 per s)                              /25/
  Q1max maximum water flow for 1 turbine (m3 per s)                /60/
* Water availability
  Va    water availability (Mm3)                                   /3.024/
;

$ontext
Here the user should add the necessary commands for importing the following parameters:
EP(t)            day-ahead prices at each hourly period t (euro per MWh)
SUC              start-up cost of a unit (euro)
Pmin             power generated by one unit when discharging the unit's minimum stable discharge (MW)
Qpmax(i)         maximum length of the i-th segment of the plant's production function (cubic meters per second)
a(i)             slope of the i-th segment of the plant's production function (MW per cubic meters per second)
$offtext

Variables
   z       income for selling energy in the day-ahead energy market;

Positive Variable
   P(t)     generated power in hour t
   Qp(t,i)  discharged water through the turbine in the segment i
   Q(t)     discharged water through the turbine (sum of segments)
   O1(t)    change of the 1st unit state
   O2(t)    change of both units state

Binary Variable
   u1(t)    on and off state of the first unit
   v(t,i)   equal 1 if water discharged has exceeded block i in period t
   u2(t)    on and off state of both units

Equations

   of             always define objective function
   e_P(t)         power generation in hour t
   e_Q(t)         water discharge of plant in period t
   e_Qp1(t,i)     discharged water flow in segment 1
   e_Qp2(t,i)     discharged water flow in segment 1
   e_Qp3(t,i)     discharged water flow in segment 2 to 5
   e_Qp4(t,i)     discharged water flow in segment 2 to 5
   e_u2(t)
   e_O1(t)
   e_O2(t)
   e_Va           water availability;


   of..                        z =e= sum(t, EP(t) * P(t))-sum(t, SUC * (O1(t)+O2(t)));
   e_P(t)..                    P(t) =e= u1(t) * Pmin + sum(i, a(i) * Qp(t,i));
   e_Q(t)..                    Q(t) =e= u1(t) * Qmin + sum(i, Qp(t,i));
   e_Qp1(t,'i1')..             Qp(t,'i1') =l= u1(t) * Qpmax('i1');
   e_Qp2(t,'i1')..             Qp(t,'i1') =g= v(t,'i1') * Qpmax('i1');
   e_Qp3(t,i)$(ord(i) gt 1)..  Qp(t,i) =l= v(t,i-1) * Qpmax(i);
   e_Qp4(t,i)$(ord(i) gt 1)..  Qp(t,i) =g= v(t,i) * Qpmax(i);
   e_u2(t)..                   u2(t) =e= v(t,'i3');
   e_O1(t)..                   O1(t) =g= u1(t) - u1(t-1);
   e_O2(t)..                   O2(t) =g= u2(t) - u2(t-1);
   e_Va..                      sum(t,Q(t)*3600/1000000) =l= Va;


Model HPP /all/;

Solve   HPP using mip maximizing z;